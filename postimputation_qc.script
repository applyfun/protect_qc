### Post-imputation QC
### 22/04/20
### Requires high memory [80GB]

cd ~/brc_scratch/output/protect_qc/imputation/downloaded

#unzip
for chr in {1..22}; do
	unzip -P 15GHndAZeSjp/U chr_$chr.zip
done

#unzip all info files
for chr in {1..22}; do
	gunzip chr$chr.info.gz
done

#convert to hard call genotypes
for chr in {2..2}; do
	plink --vcf chr$chr.dose.vcf.gz --make-bed --out imputed_chr$chr
done

#count all variants in hard called filed
for f in imputed_chr*.bim; do (cat "${f}"; echo) >> bim_all.tmp; done
wc -l bim_all.tmp #42243362 variants hard called
rm bim_all.tmp

#join info files to have all variants in one file
rm allchrs.txt
for f in *.info; do (cat "${f}"; echo) >> allchrs.txt; done
wc -l allchrs.txt #47111549 variants 

#exclude MAF=0.00000 and those ultra-rare with MAF <0.0001
awk '$5 < 0.00001 { next } { print }' allchrs.txt > allchrs_maf_threshold.txt

#check
head allchrs_maf_threshold.txt
wc -l allchrs_maf_threshold.txt
# 47111549 originally, now 44552380 after MAF exclusions

#liftover original genotypes again, this time making sure X and Y are lifted because pre-imputation they weren't

cd ~/brc_scratch/output/protect_qc/

#convert to map first
plink \
--bfile merged_uk_protect_TEC.filtered \
--recode \
--tab \
--out merged_uk_protect_TEC.filtered.forliftover

#replace chrom 23 with X and 24 with Y in first column of file
awk '{gsub("23","X",$1)}1' merged_uk_protect_TEC.filtered.forliftover.map >  merged_uk_protect_TEC.filtered.forliftover.x.map
awk '{gsub("24","Y",$1)}1' merged_uk_protect_TEC.filtered.forliftover.x.map >  merged_uk_protect_TEC.filtered.forliftover.xy.map

#check
awk -F ' ' '{freq[$1]++} END{for (i in freq) print freq[i], i}' merged_uk_protect_TEC.filtered.forliftover.xy.map

mv $merged_uk_protect_TEC.filtered.forliftover.xy.map merged_uk_protect_TEC.filtered.forliftover.map

#lift
module load devtools/python/3.7.2

python ~/brc_scratch/software/liftOverPlink-master/liftOverPlink.py --bin ~/brc_scratch/software/liftOver_updated --map merged_uk_protect_TEC.filtered.forliftover.xy.map --out filtered.forliftover_lifted_xy --chain ~/brc_scratch/software/hg38ToHg19.over.chain.gz

#remove bad lifted snps, generate good ped snd combine fixed ped with fixed map
awk '{print $2}' filtered.forliftover_lifted_xy.map > keep_snps.txt

# Note: this will clobber the lifted MAP file generated by `liftOverPlink`:
plink --file merged_uk_protect_TEC.filtered.forliftover --recode --out filtered.forliftover_good_lifted2 --extract keep_snps.txt 
plink --map filtered.forliftover_lifted_xy.map --ped filtered.forliftover_good_lifted2.ped --make-bed --out finalxy

plink --bfile finalxy --make-bed --maf 0.000001 --out all_liftover_converted_TEC_xy

#check XY chroms retained as 23/24
awk -F ' ' '{freq[$1]++} END{for (i in freq) print freq[i], i}' all_liftover_converted_TEC_xy.bim

#split 23 and 24 from data
for chr in {23..24} ; do
 plink --bfile all_liftover_converted_TEC_xy --chr $chr --make-bed --out all_liftover_converted_TEC_xy_chrom$chr
done

#check - 23 and 24 will be rsids for names not chr:position
head all_liftover_converted_TEC_xy_chrom23.bim
wc -l all_liftover_converted_TEC_xy_chrom23.bim

#copy over chr X and chr Y that were not imputed and convert to bed for merge
cp all_liftover_converted_TEC_xy_chrom23.bed ~/brc_scratch/output/protect_qc/imputation/downloaded/
cp all_liftover_converted_TEC_xy_chrom23.bim ~/brc_scratch/output/protect_qc/imputation/downloaded/
cp all_liftover_converted_TEC_xy_chrom23.fam ~/brc_scratch/output/protect_qc/imputation/downloaded/

cp all_liftover_converted_TEC_xy_chrom24.bed ~/brc_scratch/output/protect_qc/imputation/downloaded/
cp all_liftover_converted_TEC_xy_chrom24.bim ~/brc_scratch/output/protect_qc/imputation/downloaded/
cp all_liftover_converted_TEC_xy_chrom24.fam ~/brc_scratch/output/protect_qc/imputation/downloaded/

#create list of file names to merge
printf "imputed_chr2
imputed_chr3
imputed_chr4
imputed_chr5
imputed_chr6
imputed_chr7
imputed_chr8
imputed_chr9
imputed_chr10
imputed_chr11
imputed_chr12
imputed_chr13
imputed_chr14
imputed_chr15
imputed_chr16
imputed_chr17
imputed_chr18
imputed_chr19
imputed_chr20
imputed_chr21
imputed_chr22
all_liftover_converted_TEC_xy_chrom23
all_liftover_converted_TEC_xy_chrom24
" > postimputation_files.txt  

#check
wc -l chr*.info

#merge across chroms and exclude multi-allelic, keep only SNPs
plink \
--bfile imputed_chr1 \
--merge-list postimputation_files.txt \
--make-bed \
--out postimputation_merged

#check merge
wc -l postimputation_merged.fam
wc -l postimputation_merged.bim

head postimputation_merged.fam
head postimputation_merged.bim

awk -F ' ' '{freq[$1]++} END{for (i in freq) print freq[i], i}' postimputation_merged.bim

plink \
--bfile postimputation_merged \
--make-bed \
--snps-only \
--out postimputation_merged_snps_only

wc -l postimputation_merged_snps_only.fam
wc -l postimputation_merged_snps_only.bim

head postimputation_merged_snps_only.fam
head postimputation_merged_snps_only.bim

#Remove samples with high amounts of missingness after imputation use same process as pre-imputation to filter for call rate iteratively at 98% 
#cp ~/brc_scratch/scripts/pelotas_adhd/gwas_scripts-master/Iterative_Missingness.sh Iterative_Missingness.sh 

#edit script to fit post-imputation process/files
#sed 's/root.common/outputdir\/imputation\/postimputation_merged/g' Iterative_Missingness.sh > postimputation_iterative_missingness.sh
#sed 's/root.filtered/outputdir\/imputation\/postimputation_merged_filtered/g' postimputation_iterative_missingness.sh > tmp.sh ; mv tmp.sh postimputation_iterative_missingness.sh
#rm Iterative_Missingness.sh 

#run iterative missingness exclusions
#cp ~/brc_scratch/scripts/pelotas_adhd/gwas_scripts-master/Iterative_Missingness.sh Iterative_Missingness.sh 

sh ~/brc_scratch/scripts/protect_qc/postimputation_iterative_missingness.sh 90 98 1

#note changes after filtering
wc -l postimputation_merged_snps_only_filtered.bim
wc -l postimputation_merged_snps_only.bim
#43822424 to 43821998 VARIANTS 
wc -l postimputation_merged_snps_only_filtered.fam
#997 samples
rm postimputation_merged_sample9*

#filter by imputation quality - create list of variants that reach minimum quality threshold and then exclude
awk '$5 < 0.001 { next } { print }' allchrs_maf_threshold.txt > allchrs_to_keep1.txt
wc -l allchrs_to_keep1.txt
#imputation quality threshold of 0.7
awk '$7 < 0.7 { next } { print }' allchrs_to_keep1.txt > allchrs_to_keep2.txt
wc -l allchrs_to_keep2.txt

awk  '{print $8}' allchrs_maf_threshold.txt > test_column.txt

#thresholds of Rsq
awk '$7 > 0.8 { next } { print }' allchrs_to_keep1.txt > lost08.txt
awk '$7 > 0.7 { next } { print }' allchrs_to_keep1.txt > lost07.txt
awk '$7 > 0.3 { next } { print }' allchrs_to_keep1.txt > lost03.txt
awk '$7 > 0.2 { next } { print }' allchrs_to_keep1.txt > lost02.txt
awk '$7 > 0.01 { next } { print }' allchrs_to_keep1.txt > lost001.txt
awk '$7 != 0 { next } { print }' allchrs_to_keep1.txt > lost0.txt

#how many do we lose at each threshold?
wc -l lost08.txt #8409933
wc -l lost07.txt #6896501
wc -l lost03.txt #2840374
wc -l lost02.txt #1978608
wc -l lost001.txt #260387
wc -l lost0.txt #3905

#list of variants that survive
awk '{print $1}' allchrs_to_keep2.txt > variants_to_keep.txt
wc -l variants_to_keep.txt #9084379
head variants_to_keep.txt

#tidy up
rm allchrs_to_keep2.txt allchrs_to_keep1.txt
rm lost0*txt

#exclude variants that didnt survive quality threshold for imputation
plink \
--bfile postimputation_merged_snps_only_filtered \
--extract variants_to_keep.txt \
--make-bed \
--out postimputation_merged_filtered_excluded

wc -l postimputation_merged_filtered_excluded.bim #9525145

#update sex in bed file with sex from older fam file
#[expects a file with FIDs and IIDs in the first two columns, and sex information 
#(1 or M = male, 2 or F = female, 0 = missing) in the (n+2)th column]
plink \
--bfile postimputation_merged_filtered_excluded \
--update-sex ~/brc_scratch/output/protect_qc/merged_uk_protect_TEC.filtered.fam 3 \
--make-bed \
--out postimputation_merged_filtered_sex_updated

head postimputation_merged_filtered_sex_updated.bim
head postimputation_merged_filtered_sex_updated.fam

#checks
wc -l postimputation_merged_filtered_sex_updated.fam #
wc -l postimputation_merged_filtered_sex_updated.bim #
head postimputation_merged_filtered_sex_updated.fam
head postimputation_merged_filtered_sex_updated.bim



########################################################################################
########################################################################################


#update chr:position IDs to rsid from 1000G phase 3

#get positions and rsids from 1000g - both PROTECT and 1000g should be in hg19 build

awk '{ print $1 ":" $4, $2 }' ~/brc_scratch/data/get_1000g/merged_1000g_maf0001_phase3.bim  > noheader_common_all_rsids_reformatted2.txt
head noheader_common_all_rsids_reformatted2.txt
wc -l noheader_common_all_rsids_reformatted2.txt

#remove hashtag lines at start of vcf files
#sed '/^#/d' common_all_20180418.vcf > noheader_common_all.vcf

#keep just first 3 columns with chr pos rsid
#awk '{print $1, $2, $3}' noheader_common_all.vcf > noheader_common_all_rsids.vcf
#wc -l noheader_common_all_rsids.vcf
#head noheader_common_all_rsids.vcf

#txt file needs to be chr:pos and rsid columns only - bim file also needs to be chr:pos only
#awk '{ print $1 ":" $2, $3 }' noheader_common_all_rsids.vcf  > noheader_common_all_rsids_reformatted2.vcf

#check it
#head noheader_common_all_rsids_reformatted2.vcf
#wc -l noheader_common_all_rsids_reformatted2.vcf

#first update of chr:pos:a1:a2 to just chr:pos
awk '{ print  $2, $1 ":" $4 }' postimputation_merged_filtered_sex_updated.bim OFS="\t" > chr_pos_update.txt
head chr_pos_update.txt

plink \
--bfile postimputation_merged_filtered_sex_updated \
--update-name chr_pos_update.txt \
--make-bed \
--out postimputation_merged_rsids_tmp

#update rsid
sort -u -k2,2 noheader_common_all_rsids_reformatted2.txt > tmp.file
sort -u -k1,1 tmp.file > noheader_common_all_rsids_reformatted_uniq.vcf
rm tmp.file

#check
wc -l noheader_common_all_rsids_reformatted_uniq.vcf
wc -l noheader_common_all_rsids_reformatted2.txt

plink \
--bfile postimputation_merged_rsids_tmp \
--list-duplicate-vars \
--make-bed \
--out postimputation_merged_rsids_nodups

#if fails to find any duplicates use the following:
cut -f 2 postimputation_merged_rsids_tmp.bim | sort | uniq -d > manual_dups.dups

plink \
--bfile postimputation_merged_rsids_tmp \
--exclude postimputation_merged_rsids_nodups.dupvar \
--make-bed \
--out postimputation_merged_rsids_tmp2

#OR

plink \
--bfile postimputation_merged_rsids_tmp \
--exclude manual_dups.dups \
--make-bed \
--out postimputation_merged_rsids_tmp2


#now update name
plink \
--bfile postimputation_merged_rsids_tmp2 \
--update-name noheader_common_all_rsids_reformatted_uniq.vcf \
--make-bed \
--out postimputation_merged_rsids

#remove all files with tmp in the name
rm *tmp*
rm test_column.txt
rm postimputation_merged_snps_only_sample9*
rm postimputation_merged_snps_only_SNP9*
rm *.nosex

#could test for differential missingness by phenotype ?

plink \
--bfile postimputation_merged_rsids \
--maf 0.001 \
--make-bed \
--out postimputation_merged_rsids_maf

#update FID to be unique

awk '{print $1, $2 , $2, $2}' postimputation_merged_rsids_maf.fam OFS="\t" > new_ids.tmp

plink \
--bfile postimputation_merged_rsids_maf \
--update-ids new_ids.tmp \
--make-bed \
--out postimputation_merged_rsids_maf_reformatted

#test gwas of bmi

sbatch 


#end